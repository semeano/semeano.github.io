// Generated by CoffeeScript 1.6.2
var CordDemo, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

CordDemo = (function(_super) {
  __extends(CordDemo, _super);

  function CordDemo() {
    _ref = CordDemo.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  CordDemo.prototype.setup = function(full) {
    var center, gap, i, max, min, op, p, s, repulsion, _i;

    if (full == null) {
      full = true;
    }

    CordDemo.__super__.setup.apply(this, arguments);

    this.physics.integrator = new Verlet();
    this.physics.viscosity = 0.01;
    this.gravity = new ConstantForce(new Vector(0.0, 1500.0));
    this.physics.behaviours.push(this.gravity);
    repulsion = new Attraction(this.mouse.pos, 20, -2000);
    this.mouse.setMass(1000);

    this.stiffness = 1.0;
    this.spacing = 10.0;

    gap = 50.0;
    min = new Vector(-gap, -gap);
    max = new Vector(this.width + gap, this.height + gap);
    center = new Vector(this.width * 0.5 - 130, this.height * 0.5 - 100);
    
    max = 10;
    
    for (i = _i = 0; 0 <= max ? _i <= max : _i >= max; i = 0 <= max ? ++_i : --_i) {
      p = new Particle(6.0);
      p.colour = '#FFFFFF';
      p.moveTo(center.set(center.x + i, center.y + i));
      p.setRadius(2.0);
      p.behaviours.push(repulsion);
      this.physics.particles.push(p);

      if (typeof op !== "undefined" && op !== null) {
        s = new Spring(op, p, this.spacing, this.stiffness);
      } else {
        var np = new Particle(6.0);
        np.moveTo(center);
        np.fixed = true;
        s = new Spring(np, p, this.spacing, this.stiffness);
      }

      this.physics.springs.push(s);
      op = p;
    }
    
    return true;
  };

  return CordDemo;

})(Demo);
